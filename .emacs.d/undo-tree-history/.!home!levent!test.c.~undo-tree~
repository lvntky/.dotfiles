(undo-tree-save-format-version . 1)
"ac6aedff93b8607dbb8180f54a21dc7a8165651f"
[nil nil nil nil (26399 15223 419321 341000) 0 nil]
([nil nil ((#("for (i = 0; i < N; ++i) {
	
	}
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 31 (fontified t)) . 1) (undo-tree-id7 . -31) (t 26399 15173 416893 343000)) nil (26399 15223 419320 512000) 0 nil])
([nil nil ((1 . 4)) nil (26399 15223 419319 228000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11 18 nil nil nil t nil)) nil 0 nil #s(yas--field 1 11 18 nil nil nil t nil) nil nil)) (1 . 12) (#("incs" 0 4 (fontified nil)) . 1) (1 . 5) (#("inc" 0 3 (fontified t)) . -1) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) 4) nil (26399 15223 419318 273000) 0 nil])
([nil nil ((11 . 18)) nil (26399 15223 419314 450000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -17) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 18) nil (26399 15223 419313 274000) 0 nil])
([nil nil ((17 . 18)) nil (26399 15223 419302 469000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 19 #s(yas--snippet nil (#s(yas--field 1 11 18 nil nil nil t nil)) nil 0 nil #s(yas--field 1 11 18 nil nil nil t nil) nil nil))) nil (26399 15223 419301 794000) 0 nil])
([nil nil ((21 . 22) (1 . 2) (19 . 20)) nil (26399 15223 419300 638000) 0 nil])
([nil nil ((22 . 23)) nil (26399 15223 419296 833000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2) (1 . 2) (t 26399 15223 455934 482000)) nil (26399 15332 646697 861000) 0 nil])
([nil nil ((#("
#include <stdio.h>
	
" 0 1 (fontified t) 1 9 (face font-lock-preprocessor-face fontified t) 9 10 (fontified t) 10 19 (face font-lock-string-face fontified t) 19 20 (fontified t) 20 22 (fontified t)) . 1) (undo-tree-id7 . -22) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) nil (26399 15332 646697 52000) 0 nil])
([nil nil ((1 . 4)) nil (26399 15332 646694 855000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11 18 nil nil nil t nil)) nil 0 nil #s(yas--field 1 11 18 nil nil nil t nil) nil nil)) (1 . 12) (#("incs" 0 4 (fontified nil)) . 1) (1 . 5) (#("inc" 0 3 (fontified t)) . -1) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) 4) nil (26399 15332 646693 875000) 0 nil])
([nil nil ((11 . 18)) nil (26399 15332 646690 523000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -17) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 18) nil (26399 15332 646689 380000) 0 nil])
([nil nil ((17 . 18)) nil (26399 15332 646677 964000) 0 nil])
([nil nil ((19 . 20) 18) nil (26399 15332 646674 992000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 20 #s(yas--snippet nil (#s(yas--field 1 11 18 nil nil nil t nil)) nil 0 nil #s(yas--field 1 11 18 nil nil nil t nil) nil nil))) nil (26399 15337 903013 984000) 0 nil])
([nil nil ((19 . 21) (t 26399 15332 697826 827000)) nil (26399 15337 903013 424000) 0 nil])
([nil nil ((21 . 29)) nil (26399 15337 903012 807000) 0 nil])
([nil nil ((#("main" 0 4 (fontified t)) . -25) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) 29) nil (26399 15337 903012 174000) 0 nil])
([nil nil ((#("int " 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . -21) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) 25) nil (26399 15337 903009 433000) 0 nil])
([nil nil ((21 . 25)) nil (26399 15337 903005 784000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil))) #s(yas--exit 42 nil) 1 nil #s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil)) nil nil)) (21 . 77) (#("main" 0 4 (fontified t)) . 21) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) 25) nil (26399 15337 903004 581000) 0 nil])
([nil nil ((31 . 34) (#("int argc, char *argv[]" 0 3 (face font-lock-type-face fontified nil) 3 10 (fontified nil) 10 14 (face font-lock-type-face fontified nil) 14 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-2-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 31) (undo-tree-id10 . -22) (30 . 31)) nil (26399 15337 902998 636000) 0 nil])
([nil nil ((apply yas--snippet-revive 21 59 #s(yas--snippet nil (#s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil))) #s(yas--exit 42 nil) 1 nil #s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil)) nil nil))) nil (26399 15346 126097 431000) 0 nil])
([nil nil ((37 . 42) (t 26399 15337 981105 59000)) nil (26399 15346 126096 464000) 0 nil])
([nil nil ((42 . 45)) nil (26399 15346 126095 90000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 47 52 nil nil nil nil #s(yas--field 2 52 53 nil (#s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0) #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) nil nil #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)))) #s(yas--field 2 52 53 nil (#s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0) #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) nil nil #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0))) #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0))) #s(yas--exit 80 nil) 2 nil #s(yas--field 1 47 52 nil nil nil nil #s(yas--field 2 52 53 nil (#s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0) #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) nil nil #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)))) nil nil)) (81 . 85) (79 . 80) (#("    " 0 4 (fontified nil)) . 79) (undo-tree-id28 . -4) (42 . 85) (#("forn" 0 4 (fontified nil)) . 42) (42 . 46) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -42) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) 45) nil (26399 15346 126092 802000) 0 nil])
([nil nil ((apply yas--snippet-revive 42 86 #s(yas--snippet nil (#s(yas--field 1 47 52 nil nil nil nil #s(yas--field 2 52 53 nil (#s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0) #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) nil nil #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)))) #s(yas--field 2 52 53 nil (#s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0) #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) nil nil #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0))) #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0))) #s(yas--exit 80 nil) 2 nil #s(yas--field 1 47 52 nil nil nil nil #s(yas--field 2 52 53 nil (#s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0) #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)) nil nil #s(yas--field 3 56 57 nil nil nil nil #s(yas--mirror 59 60 nil nil #s(yas--field 4 63 70 nil nil nil nil #s(yas--mirror 74 75 nil nil #s(yas--exit 80 nil) 0)) 0)))) nil nil))) nil (26399 15346 126084 749000) 0 nil])
([nil nil ((#("
    for (auto i = 0; i < MAXIMUM; ++i) {
	
    }" 0 1 (fontified t) 1 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 14 (face font-lock-keyword-face fontified t) 14 22 (fontified t) 22 23 (fontified t) 23 37 (fontified t) 37 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t)) . 37) (undo-tree-id25 . -49) (undo-tree-id26 . -5) (undo-tree-id27 . -5)) nil (26399 15346 126080 247000) 0 nil])
([nil nil ((#("    return 0;
" 0 4 (fontified nil) 4 10 (face font-lock-keyword-face fontified nil) 10 14 (fontified nil)) . 57) (undo-tree-id57 . -1) (52 . 57) (#("    
" 0 5 (fontified t)) . 38) (43 . 57) 44 (t 26399 15346 164354 950000)) nil (26399 15400 512269 974000) 0 nil])
([nil nil ((#("    return 0;
" 0 4 (fontified nil) 4 10 (face font-lock-keyword-face fontified nil) 10 14 (fontified nil)) . 52) (undo-tree-id53 . -1) (50 . 52) (#("{
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (fontified t)) . 36) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (38 . 52) 39) nil (26399 15400 512268 290000) 0 nil])
([nil nil ((#("{
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (fontified nil)) . 52) (38 . 52) (#("    return 0;
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 14 (fontified t)) . 36) (undo-tree-id52 . -1) (50 . 52) 37) nil (26399 15400 512265 333000) 0 nil])
([nil nil ((#("    
" 0 5 (fontified nil)) . 57) (43 . 57) (#("    return 0;
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 14 (fontified t)) . 38) (undo-tree-id51 . -1) (52 . 57) 39) nil (26399 15400 512263 746000) 0 nil])
([nil nil ((#("}
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (fontified nil)) . 59) (45 . 59) (#("    return 0;
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 14 (fontified t)) . 43) (undo-tree-id50 . -1) (57 . 59) 44) nil (26399 15400 512262 199000) 0 nil])
([nil nil ((#("    return 0;
" 0 4 (fontified nil) 4 10 (face font-lock-keyword-face fontified nil) 10 14 (fontified nil)) . 59) (undo-tree-id49 . -1) (57 . 59) (#("}
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (fontified t)) . 43) (45 . 59) 46) nil (26399 15400 512260 596000) 0 nil])
([nil nil ((42 . 43) (#("    " 0 4 (fontified nil)) . 38) (undo-tree-id48 . -1) (39 . 42) (39 . 40)) nil (26399 15400 512259 110000) 0 nil])
([nil nil ((43 . 52)) nil (26399 15400 512257 583000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -51) (undo-tree-id47 . -1) 52) nil (26399 15400 512256 985000) 0 nil])
([nil nil ((#("    printf()" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t)) . 39) (undo-tree-id46 . -12)) nil (26399 15400 512255 861000) 0 nil])
([nil nil ((39 . 43)) nil (26399 15400 512254 960000) 0 nil])
([nil nil ((43 . 46)) nil (26399 15400 512254 559000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 51 57 nil nil nil nil #s(yas--field 2 60 72 nil nil nil t #s(yas--field 3 73 73 nil nil nil t nil))) #s(yas--field 2 60 72 nil nil nil t #s(yas--field 3 73 73 nil nil nil t nil)) #s(yas--field 3 73 73 nil nil nil t nil)) nil 3 nil #s(yas--field 3 73 73 nil nil nil t nil) nil nil)) (43 . 87) (#("fprintf" 0 7 (fontified nil)) . 43) (43 . 50) (#("fpr" 0 3 (fontified t)) . -43) (undo-tree-id45 . -3) 46) nil (26399 15400 512253 929000) 0 nil])
([nil nil ((61 . 72) (#("format string" 0 13 (face font-lock-string-face fontified nil)) . 61) (undo-tree-id44 . -13) (60 . 61)) nil (26399 15400 512252 382000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-string-face fontified t)) . -70) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -71) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 72) nil (26399 15400 512250 926000) 0 nil])
([nil nil ((70 . 72)) nil (26399 15400 512247 905000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified t)) . -71) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 72) nil (26399 15400 512247 190000) 0 nil])
([nil nil ((71 . 73)) nil (26399 15400 512245 447000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -70) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -71) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -72) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 73) nil (26399 15400 512243 809000) 0 nil])
([nil nil ((70 . 72)) nil (26399 15400 512231 89000) 0 nil])
([nil nil ((#("variable" 0 8 (fontified t)) . 75) (undo-tree-id66 . -8) (t 26399 15400 543849 461000)) nil (26399 15403 250157 399000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -73) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#(" " 0 1 (fontified t)) . -74) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 75) nil (26399 15403 250155 189000) 0 nil])
([nil nil ((apply yas--snippet-revive 43 76 #s(yas--snippet nil (#s(yas--field 1 51 57 nil nil nil nil #s(yas--field 2 60 72 nil nil nil t #s(yas--field 3 73 73 nil nil nil t nil))) #s(yas--field 2 60 72 nil nil nil t #s(yas--field 3 73 73 nil nil nil t nil)) #s(yas--field 3 73 73 nil nil nil t nil)) nil 3 nil #s(yas--field 3 73 73 nil nil nil t nil) nil nil))) nil (26399 15403 250143 296000) 0 nil])
([nil nil ((75 . 80)) nil (26399 15403 250140 515000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 80) (t 26399 15403 317158 937000)) nil (26399 15407 765971 4000) 0 nil])
([nil nil ((1 . 2) (t 26399 15407 797120 739000)) nil (26399 15472 752717 631000) 0 nil])
([nil nil ((81 . 83)) nil (26399 15472 752717 101000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -82) (undo-tree-id93 . -1) 83) nil (26399 15472 752716 403000) 0 nil])
([nil nil ((82 . 84)) nil (26399 15472 752715 308000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -81) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("r" 0 1 (fontified t)) . -82) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("i" 0 1 (fontified t)) . -83) (undo-tree-id92 . -1) 84) nil (26399 15472 752714 479000) 0 nil])
([nil nil ((81 . 83)) nil (26399 15472 752709 265000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 89 102 nil nil nil nil #s(yas--field 2 103 103 nil nil nil t nil)) #s(yas--field 2 103 103 nil nil nil t nil)) nil 4 nil #s(yas--field 2 103 103 nil nil nil t nil) nil nil)) (81 . 112) (#("pr" 0 2 (fontified t)) . 81) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) 83) nil (26399 15472 752708 489000) 0 nil])
([nil nil ((104 . 108) (#(" ,a0,a1" 0 7 (fontified nil)) . 104) (undo-tree-id79 . -7) (undo-tree-id80 . -4) (undo-tree-id81 . -6) (103 . 104)) nil (26399 15472 752705 491000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -103) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . 1) (undo-tree-id70 . -1) (#(" " 0 1 (fontified t)) . -104) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#(" " 0 1 (fontified t)) . -105) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#(" " 0 1 (fontified t)) . -106) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#(" " 0 1 (fontified t)) . -107) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 108) nil (26399 15472 752702 1000) 0 nil])
([nil nil ((apply yas--snippet-revive 81 105 #s(yas--snippet nil (#s(yas--field 1 89 102 nil nil nil nil #s(yas--field 2 103 103 nil nil nil t nil)) #s(yas--field 2 103 103 nil nil nil t nil)) nil 4 nil #s(yas--field 2 103 103 nil nil nil t nil) nil nil))) nil (26399 15472 752686 494000) 0 nil])
([nil nil ((105 . 110) (t 26399 15472 829938 342000)) nil (26399 15487 317826 847000) 0 nil])
([nil nil ((#("
#include <stdio.h>

int main(void)
{

    fprintf(stdout, \"hello, world\");
    printf(\"format string\");
    
    return 0;
}

" 0 1 (fontified t) 1 9 (face font-lock-preprocessor-face fontified t) 9 10 (fontified t) 10 19 (face font-lock-string-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 24 (face font-lock-type-face fontified t) 24 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 34 (face font-lock-type-face fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 43 (fontified t) 43 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 59 (fontified t) 59 73 (face font-lock-string-face fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 76 (fontified t) 76 80 (fontified t) 80 86 (fontified t) 86 87 (face (rainbow-delimiters-depth-2-face) fontified t) 87 102 (face font-lock-string-face fontified t) 102 103 (face (rainbow-delimiters-depth-2-face) fontified t) 103 109 (fontified t) 109 110 (fontified t) 110 114 (fontified t) 114 120 (face font-lock-keyword-face fontified t) 120 124 (fontified t) 124 125 (face (rainbow-delimiters-depth-1-face) fontified t) 125 126 (fontified t) 126 127 (fontified t)) . 1) (undo-tree-id109 . -127) (undo-tree-id110 . -80) (undo-tree-id111 . -36) (undo-tree-id112 . -39) (undo-tree-id113 . -43) (undo-tree-id114 . -80) (undo-tree-id115 . -127) (undo-tree-id116 . -109)) nil (26399 15487 317825 438000) 0 nil])
([nil nil ((1 . 5)) nil (26399 15487 317816 930000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 12 13 nil nil nil t nil)) nil 5 nil #s(yas--field 1 12 13 nil nil nil t nil) nil nil)) (2 . 13) (#("incl" 0 4 (fontified nil)) . 2) (2 . 6) (#("inc" 0 3 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) 5) nil (26399 15487 317815 359000) 0 nil])
([nil nil ((12 . 13)) nil (26399 15487 317810 640000) 0 nil])
([nil nil ((apply yas--snippet-revive 2 14 #s(yas--snippet nil (#s(yas--field 1 12 13 nil nil nil t nil)) nil 5 nil #s(yas--field 1 12 13 nil nil nil t nil) nil nil))) nil (26399 15487 317809 869000) 0 nil])
([nil nil ((#("##include \"s\"" 0 1 (face font-lock-preprocessor-face fontified t) 1 9 (face font-lock-preprocessor-face fontified t) 9 10 (fontified t) 10 13 (face font-lock-string-face fontified t)) . 1) (undo-tree-id102 . -13) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -12)) nil (26399 15487 317808 772000) 0 nil])
([nil nil ((1 . 6)) nil (26399 15487 317803 868000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11 62 nil nil nil t nil)) nil 6 nil #s(yas--field 1 11 62 nil nil nil t nil) nil nil)) (2 . 13) (#("incl" 0 4 (face font-lock-preprocessor-face fontified t)) . 2) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) 6) nil (26399 15487 317802 428000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -11) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) 12) nil (26399 15487 317797 460000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 11)) nil (26399 15487 317793 149000) 0 nil])
([nil nil ((11 . 20)) nil (26399 15487 317792 278000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -19) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 20) nil (26399 15487 317790 316000) 0 nil])
([nil nil ((19 . 20)) nil (26399 15487 317777 901000) 0 nil])
([nil nil ((20 . 21)) nil (26399 15487 317772 702000) 0 nil])
([nil nil ((21 . 22) (t 26399 15487 356497 783000)) nil (26399 15497 937576 321000) 0 nil])
([nil nil ((22 . 30)) nil (26399 15497 937575 827000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 35 57 nil nil nil nil #s(yas--exit 65 nil))) #s(yas--exit 65 nil) 7 nil #s(yas--field 1 35 57 nil nil nil nil #s(yas--exit 65 nil)) #s(yas--field 1 11 62 nil nil nil t nil) nil)) (26 . 82) (#("main" 0 4 (fontified t)) . 26) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) 30) nil (26399 15497 937575 149000) 0 nil])
([nil nil ((82 . 83) (apply yas--snippet-revive 26 82 #s(yas--snippet nil (#s(yas--field 1 35 57 nil nil nil nil #s(yas--exit 65 nil))) #s(yas--exit 65 nil) 7 nil #s(yas--field 1 35 57 nil nil nil nil #s(yas--exit 65 nil)) #s(yas--field 1 11 62 nil nil nil t nil) nil))) nil (26399 15497 937572 423000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 22) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("t" 0 1 (fontified t)) . 22) (#("n" 0 1 (fontified t)) . 22) (#("i" 0 1 (face font-lock-type-face fontified t)) . 22)) nil (26399 15497 937571 439000) 0 nil])
([nil nil ((54 . 55)) nil (26399 15497 937569 395000) 0 nil])
([nil nil ((55 . 57)) nil (26399 15497 937568 457000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -54) (undo-tree-id117 . -1) (#("
" 0 1 (fontified t)) . -55) (undo-tree-id118 . -1) (undo-tree-id119 . 1) (undo-tree-id120 . -1) (#("
" 0 1 (fontified t)) . -56) (undo-tree-id121 . -1) (undo-tree-id122 . 1) (undo-tree-id123 . -1) 57) nil (26399 15497 937565 763000) 0 nil])
([nil nil ((56 . 61) (t 26399 15497 983087 457000)) nil (26399 15542 17452 639000) 0 nil])
([nil nil ((60 . 64) (#("    " 0 4 (fontified nil)) . 59) (undo-tree-id160 . -4) (59 . 64) (#("    " 0 4 (fontified nil)) . 58) (undo-tree-id161 . -4) (58 . 63) (#("    " 0 4 (fontified nil)) . 57) (undo-tree-id162 . -4) (61 . 62)) nil (26399 15542 17450 774000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -63) (undo-tree-id159 . -1) 64) nil (26399 15542 17445 735000) 0 nil])
([nil nil ((#("argv[])
{



   " 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 16 (fontified t)) . -47) (undo-tree-id158 . -16) 63) nil (26399 15542 17443 703000) 0 nil])
([nil nil ((#("char *" 0 4 (face font-lock-type-face fontified t) 4 6 (fontified t)) . -41) (undo-tree-id157 . -6) 47) nil (26399 15542 17441 394000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -40) (undo-tree-id156 . -1) 41) nil (26399 15542 17439 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 2 63 #s(yas--snippet nil (#s(yas--field 1 11 62 nil nil nil t nil)) nil 6 nil #s(yas--field 1 11 62 nil nil nil t nil) nil nil))) nil (26399 15542 17436 762000) 0 nil])
([nil nil ((#("##include <stdio.h>

int main(int argc,
    
    return 0;
}

" 0 1 (face font-lock-preprocessor-face fontified t) 1 9 (face font-lock-preprocessor-face fontified t) 9 10 (fontified t) 10 19 (face font-lock-string-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 24 (face font-lock-type-face fontified t) 24 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 33 (face font-lock-type-face fontified t) 33 39 (fontified t) 39 40 (fontified t) 40 49 (fontified t) 49 55 (face font-lock-keyword-face fontified t) 55 59 (fontified t) 59 60 (face (rainbow-delimiters-mismatched-face) fontified t) 60 61 (fontified t) 61 62 (fontified t)) . 1) (undo-tree-id152 . -62) (undo-tree-id153 . -21) (undo-tree-id154 . -21) (undo-tree-id155 . -39)) nil (26399 15542 17435 516000) 0 nil])
([nil nil ((1 . 6)) nil (26399 15542 17430 706000) 0 nil])
([nil nil ((6 . 7)) nil (26399 15542 17429 711000) 0 nil])
([nil nil ((#("stdio
" 0 6 (fontified t)) . -1) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -6) 7) nil (26399 15542 17428 447000) 0 nil])
([nil nil ((1 . 3)) nil (26399 15542 17424 573000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 19 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (1 . 19) (#("io" 0 2 (fontified t)) . 1) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) 3) nil (26399 15542 17423 228000) 0 nil])
([nil nil ((19 . 20)) nil (26399 15542 17418 870000) 0 nil])
([nil nil ((20 . 24)) nil (26399 15542 17418 54000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 29 33 nil nil nil t #s(yas--exit 41 nil))) #s(yas--exit 41 nil) 9 nil #s(yas--field 1 29 33 nil nil nil t #s(yas--exit 41 nil)) nil nil)) (20 . 76) (#("main" 0 4 (fontified t)) . 20) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) 24) nil (26399 15542 17416 761000) 0 nil])
([nil nil ((30 . 33) (#("int argc, char *argv[]" 0 3 (face font-lock-type-face fontified nil) 3 10 (fontified nil) 10 14 (face font-lock-type-face fontified nil) 14 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-2-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 30) (29 . 30)) nil (26399 15542 17412 283000) 0 nil])
([nil nil ((apply yas--snippet-revive 20 58 #s(yas--snippet nil (#s(yas--field 1 29 33 nil nil nil t #s(yas--exit 41 nil))) #s(yas--exit 41 nil) 9 nil #s(yas--field 1 29 33 nil nil nil t #s(yas--exit 41 nil)) nil nil))) nil (26399 15542 17410 957000) 0 nil])
([nil nil ((36 . 41)) nil (26399 15542 17410 77000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 41) (#("
" 0 1 (fontified t)) . 41)) nil (26399 15542 17408 971000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -36) (undo-tree-id138 . -1) (#(" " 0 1 (fontified t)) . -37) (undo-tree-id139 . -1) (#(" " 0 1 (fontified t)) . -38) (undo-tree-id140 . -1) (#(" " 0 1 (fontified t)) . -39) (undo-tree-id141 . -1) (#(" " 0 1 (fontified t)) . -40) (undo-tree-id142 . -1) 41) nil (26399 15542 17407 127000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 36)) nil (26399 15542 17291 288000) 0 nil])
([nil nil ((39 . 41) (36 . 37)) nil (26399 15542 17290 186000) 0 nil])
([nil nil ((41 . 43)) nil (26399 15542 17288 868000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 49 54 nil nil nil t #s(yas--field 2 55 55 nil nil nil t nil)) #s(yas--field 2 55 55 nil nil nil t nil)) nil 10 nil #s(yas--field 2 55 55 nil nil nil t nil) nil nil)) (41 . 72) (#("pr" 0 2 (fontified t)) . 41) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) 43) nil (26399 15542 17287 580000) 0 nil])
([nil nil ((50 . 54) (#("format string" 0 13 (face font-lock-string-face fontified nil)) . 50) (49 . 50)) nil (26399 15542 17283 198000) 0 nil])
([nil nil ((56 . 60) (#(" ,a0,a1" 0 7 (fontified nil)) . 56) (55 . 56)) nil (26399 15542 17281 655000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -57) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -58) (undo-tree-id133 . -1) (#(" " 0 1 (fontified t)) . -59) (undo-tree-id134 . -1) 60) nil (26399 15542 17279 532000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -55) (undo-tree-id130 . -1) (#(" " 0 1 (fontified t)) . -56) (undo-tree-id131 . -1) 57) nil (26399 15542 17273 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 41 57 #s(yas--snippet nil (#s(yas--field 1 49 54 nil nil nil t #s(yas--field 2 55 55 nil nil nil t nil)) #s(yas--field 2 55 55 nil nil nil t nil)) nil 10 nil #s(yas--field 2 55 55 nil nil nil t nil) nil nil))) nil (26399 15542 17260 636000) 0 nil])
([nil nil ((57 . 62)) nil (26399 15542 17255 347000) 0 nil])
([nil nil ((#("#include <stdio.h>
int main(void)
{
    printf(\"hello\");
    
    return 0;
}
" 0 8 (face font-lock-preprocessor-face fontified t) 8 9 (fontified t) 9 18 (face font-lock-string-face fontified t) 18 19 (fontified t) 19 22 (face font-lock-type-face fontified t) 22 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 32 (face font-lock-type-face fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-2-face) fontified t) 47 54 (face font-lock-string-face fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 66 (fontified t) 66 72 (face font-lock-keyword-face fontified t) 72 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-1-face) fontified t) 77 78 (fontified t)) . 1) (undo-tree-id6 . -78) (t 26399 15542 59445 681000)) nil (26399 15679 897182 344000) 0 nil])
([nil nil ((1 . 4)) nil (26399 15679 897181 286000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11 18 nil nil nil t nil)) nil 0 nil #s(yas--field 1 11 18 nil nil nil t nil) nil nil)) (1 . 12) (#("incs" 0 4 (fontified nil)) . 1) (1 . 5) (#("inc" 0 3 (fontified t)) . -1) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) 4) nil (26399 15679 897180 374000) 0 nil])
([nil nil ((11 . 18)) nil (26399 15679 897176 738000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -17) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 18) nil (26399 15679 897175 443000) 0 nil])
([nil nil ((17 . 18)) nil (26399 15679 897164 53000) 0 nil])
([nil nil ((19 . 20) 18) nil (26399 15679 897160 864000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 20 #s(yas--snippet nil (#s(yas--field 1 11 18 nil nil nil t nil)) nil 0 nil #s(yas--field 1 11 18 nil nil nil t nil) nil nil))) nil (26399 15695 570902 737000) 0 nil])
([nil nil ((19 . 21) (t 26399 15679 940768 406000)) nil (26399 15695 570902 74000) 0 nil])
([nil nil ((21 . 26)) nil (26399 15695 570901 150000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -22) (undo-tree-id18 . -1) (#("a" 0 1 (fontified t)) . -23) (undo-tree-id19 . -1) (#("i" 0 1 (fontified t)) . -24) (undo-tree-id20 . -1) (#("n" 0 1 (fontified t)) . -25) (undo-tree-id21 . -1) 26) nil (26399 15695 570900 385000) 0 nil])
([nil nil ((22 . 25)) nil (26399 15695 570897 472000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 30 30 nil nil nil t #s(yas--exit 38 nil))) #s(yas--exit 38 nil) 1 nil #s(yas--field 1 30 30 nil nil nil t #s(yas--exit 38 nil)) nil nil)) (21 . 77) (#("main" 0 4 (fontified t)) . 21) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) 25) nil (26399 15695 570896 747000) 0 nil])
([nil nil ((apply yas--snippet-revive 21 55 #s(yas--snippet nil (#s(yas--field 1 30 30 nil nil nil t #s(yas--exit 38 nil))) #s(yas--exit 38 nil) 1 nil #s(yas--field 1 30 30 nil nil nil t #s(yas--exit 38 nil)) nil nil)) (#("int argc, char *argv[]" 0 3 (face font-lock-type-face fontified t) 3 10 (fontified t) 10 14 (face font-lock-type-face fontified t) 14 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t)) . 30)) nil (26399 15695 570894 479000) 0 nil])
([nil nil ((38 . 40)) nil (26399 15695 570893 858000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 46 51 nil nil nil t #s(yas--field 2 52 52 nil nil nil t nil)) #s(yas--field 2 52 52 nil nil nil t nil)) nil 2 nil #s(yas--field 2 52 52 nil nil nil t nil) nil nil)) (38 . 69) (#("pr" 0 2 (fontified t)) . 38) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) 40) nil (26399 15695 570892 663000) 0 nil])
([nil nil ((47 . 50) (#("format string" 0 13 (face font-lock-string-face fontified nil)) . 47) (undo-tree-id10 . -13) (46 . 47)) nil (26399 15695 570889 582000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -49) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 50) nil (26399 15695 570887 745000) 0 nil])
([nil nil ((49 . 51)) nil (26399 15695 570885 161000) 0 nil])
([nil nil ((#(" ,a0,a1" 0 7 (fontified t)) . 52) (undo-tree-id7 . -7)) nil (26399 15695 570882 539000) 0 nil])
([nil nil ((apply yas--snippet-revive 38 54 #s(yas--snippet nil (#s(yas--field 1 46 51 nil nil nil t #s(yas--field 2 52 52 nil nil nil t nil)) #s(yas--field 2 52 52 nil nil nil t nil)) nil 2 nil #s(yas--field 2 52 52 nil nil nil t nil) nil nil))) nil (26399 15705 377740 584000) 0 nil])
([nil nil ((54 . 59) (t 26399 15695 607076 38000)) nil (26399 15705 377740 87000) 0 nil])
([nil nil ((59 . 61)) nil (26399 15705 377739 618000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 66 69 nil nil nil t #s(yas--exit 74 nil))) #s(yas--exit 74 nil) 3 nil #s(yas--field 1 66 69 nil nil nil t #s(yas--exit 74 nil)) nil nil)) (81 . 85) (79 . 80) (#("      " 0 6 (fontified nil)) . 79) (59 . 87) (#("while" 0 5 (fontified nil)) . 59) (59 . 64) (#("wh" 0 2 (fontified t)) . -59) (undo-tree-id42 . -2) 61) nil (26399 15705 377738 788000) 0 nil])
([nil nil ((67 . 69) (#("condition" 0 9 (fontified nil)) . 67) (66 . 67)) nil (26399 15705 377736 997000) 0 nil])
([nil nil ((apply yas--snippet-revive 59 80 #s(yas--snippet nil (#s(yas--field 1 66 69 nil nil nil t #s(yas--exit 74 nil))) #s(yas--exit 74 nil) 3 nil #s(yas--field 1 66 69 nil nil nil t #s(yas--exit 74 nil)) nil nil))) nil (26399 15705 377736 437000) 0 nil])
([nil nil ((80 . 85)) nil (26399 15705 377735 984000) 0 nil])
([nil nil ((85 . 87)) nil (26399 15705 377735 485000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 89 99 nil nil nil t #s(yas--field 2 101 110 nil nil nil nil #s(yas--exit 104 nil))) #s(yas--field 2 101 110 nil nil nil nil #s(yas--exit 104 nil))) #s(yas--exit 104 nil) 4 nil #s(yas--field 1 89 99 nil nil nil t #s(yas--field 2 101 110 nil nil nil nil #s(yas--exit 104 nil))) nil nil)) (104 . 108) (102 . 103) (#("    " 0 4 (fontified nil)) . 102) (undo-tree-id38 . -4) (85 . 108) (#("if" 0 2 (face font-lock-keyword-face fontified t)) . 85) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) 87) nil (26399 15705 377734 793000) 0 nil])
([nil nil ((90 . 99) (#("condition" 0 9 (fontified nil)) . 90) (89 . 90)) nil (26399 15705 377731 691000) 0 nil])
([nil nil ((apply yas--snippet-revive 85 110 #s(yas--snippet nil (#s(yas--field 1 89 99 nil nil nil t #s(yas--field 2 101 110 nil nil nil nil #s(yas--exit 104 nil))) #s(yas--field 2 101 110 nil nil nil nil #s(yas--exit 104 nil))) #s(yas--exit 104 nil) 4 nil #s(yas--field 1 89 99 nil nil nil t #s(yas--field 2 101 110 nil nil nil nil #s(yas--exit 104 nil))) nil nil))) nil (26399 15705 377731 128000) 0 nil])
([nil nil ((110 . 115)) nil (26399 15705 377730 750000) 0 nil])
([nil nil ((115 . 118)) nil (26399 15705 377730 383000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 120 129 nil nil nil t #s(yas--field 2 131 136 nil nil nil nil #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil)))) #s(yas--field 2 131 136 nil nil nil nil #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil))) #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil))) #s(yas--exit 146 nil) 5 nil #s(yas--field 1 120 129 nil nil nil t #s(yas--field 2 131 136 nil nil nil nil #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil)))) nil nil)) (143 . 147) (141 . 142) (#("    " 0 4 (fontified nil)) . 141) (undo-tree-id33 . -4) (115 . 147) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . 115) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) 118) nil (26399 15705 377729 442000) 0 nil])
([nil nil ((121 . 130) (#("i = 0" 0 5 (fontified nil)) . 121) (undo-tree-id32 . -5) (120 . 121)) nil (26399 15705 377725 591000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -129) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 130) nil (26399 15705 377724 135000) 0 nil])
([nil nil ((apply yas--snippet-revive 115 152 #s(yas--snippet nil (#s(yas--field 1 120 129 nil nil nil t #s(yas--field 2 131 136 nil nil nil nil #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil)))) #s(yas--field 2 131 136 nil nil nil nil #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil))) #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil))) #s(yas--exit 146 nil) 5 nil #s(yas--field 1 120 129 nil nil nil t #s(yas--field 2 131 136 nil nil nil nil #s(yas--field 3 138 141 nil nil nil nil #s(yas--exit 146 nil)))) nil nil))) nil (26399 15705 377721 795000) 0 nil])
([nil nil ((#("#include <stdio.h>

int main()
{
    printf(\"hello\");
    while (ksd) {
	
    }
    if (sakmdlkams) {
	
    }
    for (skmdlksam; i < N; ++i) {
	
    }
    return 0;
}

" 0 8 (face font-lock-preprocessor-face fontified t) 8 9 (fontified t) 9 18 (face font-lock-string-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 23 (face font-lock-type-face fontified t) 23 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 33 (fontified t) 33 37 (fontified t) 37 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t) 44 51 (face font-lock-string-face fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 54 (fontified t) 54 58 (fontified t) 58 63 (face font-lock-keyword-face fontified t) 63 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t) 72 74 (fontified t) 74 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-2-face) fontified t) 79 80 (fontified t) 80 84 (fontified t) 84 86 (face font-lock-keyword-face fontified t) 86 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t) 88 98 (fontified t) 98 99 (face (rainbow-delimiters-depth-2-face) fontified t) 99 100 (fontified t) 100 101 (face (rainbow-delimiters-depth-2-face) fontified t) 101 102 (fontified t) 102 104 (fontified t) 104 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-2-face) fontified t) 109 110 (fontified t) 110 114 (fontified t) 114 117 (face font-lock-keyword-face fontified t) 117 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-2-face) fontified t) 119 128 (fontified t) 128 140 (fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t) 141 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-2-face) fontified t) 143 144 (fontified t) 144 150 (fontified t) 150 151 (face (rainbow-delimiters-depth-2-face) fontified t) 151 152 (fontified t) 152 156 (fontified t) 156 162 (face font-lock-keyword-face fontified t) 162 166 (fontified t) 166 167 (face (rainbow-delimiters-depth-1-face) fontified t) 167 168 (fontified t) 168 169 (fontified t)) . 1) (undo-tree-id22 . -169) (undo-tree-id23 . -114) (undo-tree-id24 . -114) (undo-tree-id25 . -114) (undo-tree-id26 . -151) (undo-tree-id27 . -151) (undo-tree-id28 . -151) (undo-tree-id29 . -128)) nil (26399 15705 377719 211000) 0 nil])
([nil nil ((1 . 3) (t 26399 15705 416858 203000)) nil (26399 15738 773916 544000) 0 nil])
([nil nil ((#("st" 0 2 (fontified t)) . -1) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) 3) nil (26399 15738 773915 727000) 0 nil])
([nil nil ((1 . 4)) nil (26399 15738 773913 468000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1) (undo-tree-id5 . -1) (#("i" 0 1 (fontified t)) . -2) (undo-tree-id6 . -1) (#("o" 0 1 (fontified t)) . -3) (undo-tree-id7 . -1) 4) nil (26399 15738 773912 586000) 0 nil])
([nil nil ((1 . 3)) nil (26399 15738 773910 239000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 20 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1 . 20) (#("io" 0 2 (fontified t)) . 1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) 3) nil (26399 15738 773909 160000) 0 nil])
([nil nil ((#("iostream" 0 8 (face font-lock-string-face fontified t)) . -11) (undo-tree-id1 . -8) 19) nil (26399 15738 773906 173000) 0 nil])
([nil nil ((11 . 18)) nil (26399 15738 773904 339000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -17) (undo-tree-id0 . -1) 18) nil (26399 15738 773902 958000) 0 nil])
([nil nil ((17 . 18)) nil (26399 15738 773893 296000) 0 nil])
([nil nil ((19 . 20) 18) nil (26399 15738 773890 226000) 0 nil])
([nil nil ((20 . 24) (t 26399 15738 829486 966000)) nil (26399 15751 391864 15000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 29 29 nil nil nil t #s(yas--exit 37 nil))) #s(yas--exit 37 nil) 1 nil #s(yas--field 1 29 29 nil nil nil t #s(yas--exit 37 nil)) nil nil)) (20 . 76) (#("main" 0 4 (fontified t)) . 20) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) 24) nil (26399 15751 391862 979000) 0 nil])
([nil nil ((#("int argc, char *argv[]" 0 3 (face font-lock-type-face fontified t) 3 10 (fontified t) 10 14 (face font-lock-type-face fontified t) 14 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t)) . 29)) nil (26399 15751 391834 353000) 0 nil])
([nil nil ((apply yas--snippet-revive 20 54 #s(yas--snippet nil (#s(yas--field 1 29 29 nil nil nil t #s(yas--exit 37 nil))) #s(yas--exit 37 nil) 1 nil #s(yas--field 1 29 29 nil nil nil t #s(yas--exit 37 nil)) nil nil))) nil (26399 15751 391833 788000) 0 nil])
([nil nil ((32 . 37)) nil (26399 15751 391833 7000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 37)) nil (26399 15751 391832 406000) 0 nil])
([nil nil ((37 . 39)) nil (26399 15751 391831 502000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 45 57 nil nil nil t #s(yas--field 2 58 58 nil nil nil t nil)) #s(yas--field 2 58 58 nil nil nil t nil)) nil 2 nil #s(yas--field 2 58 58 nil nil nil t nil) nil nil)) (37 . 68) (#("pr" 0 2 (fontified t)) . 37) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) 39) nil (26399 15751 391830 325000) 0 nil])
([nil nil ((46 . 57) (#("format string" 0 13 (face font-lock-string-face fontified nil)) . 46) (undo-tree-id12 . -13) (45 . 46)) nil (26399 15751 391826 973000) 0 nil])
([nil nil ((#(" ,a0,a1" 0 7 (fontified t)) . 58) (undo-tree-id11 . -7)) nil (26399 15751 391822 470000) 0 nil])
([nil nil ((apply yas--snippet-revive 37 60 #s(yas--snippet nil (#s(yas--field 1 45 57 nil nil nil t #s(yas--field 2 58 58 nil nil nil t nil)) #s(yas--field 2 58 58 nil nil nil t nil)) nil 2 nil #s(yas--field 2 58 58 nil nil nil t nil) nil nil))) nil (26399 15757 528640 527000) 0 nil])
([nil nil ((61 . 65) (#("    " 0 4 (fontified nil)) . 60) (undo-tree-id27 . -4) (64 . 65) (t 26399 15751 439235 43000)) nil (26399 15757 528639 794000) 0 nil])
([nil nil ((65 . 70)) nil (26399 15757 528638 602000) 0 nil])
([nil nil ((70 . 73)) nil (26399 15757 528638 175000) 0 nil])
([nil nil ((#("main" 0 4 (fontified t)) . -69) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) 73) nil (26399 15757 528637 515000) 0 nil])
([nil nil ((#("int " 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t)) . -65) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) 69) nil (26399 15757 528635 312000) 0 nil])
([nil nil ((65 . 80)) nil (26399 15757 528632 687000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -78) (undo-tree-id19 . -1) (#("0" 0 1 (fontified t)) . -79) (undo-tree-id20 . -1) 80) nil (26399 15757 528631 168000) 0 nil])
([nil nil ((78 . 79)) nil (26399 15757 528620 627000) 0 nil])
([nil nil ((79 . 84) (t 26399 15757 572448 427000)) nil (26399 15774 838813 628000) 0 nil])
([nil nil ((84 . 99)) nil (26399 15774 838812 520000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -96) (undo-tree-id45 . -1) (#("r" 0 1 (fontified t)) . -97) (undo-tree-id46 . -1) (#(" " 0 1 (fontified t)) . -98) (undo-tree-id47 . -1) 99) nil (26399 15774 838811 186000) 0 nil])
([nil nil ((96 . 99)) nil (26399 15774 838807 54000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -96) (undo-tree-id42 . -1) (#(" " 0 1 (fontified t)) . -97) (undo-tree-id43 . -1) (#("-" 0 1 (fontified t)) . -98) (undo-tree-id44 . -1) 99) nil (26399 15774 838805 699000) 0 nil])
([nil nil ((96 . 99)) nil (26399 15774 838801 492000) 0 nil])
([nil nil ((99 . 101)) nil (26399 15774 838800 602000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -100) (undo-tree-id41 . -1) 101) nil (26399 15774 838799 606000) 0 nil])
([nil nil ((100 . 102)) nil (26399 15774 838797 493000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -101) (undo-tree-id40 . -1) 102) nil (26399 15774 838796 378000) 0 nil])
([nil nil ((100 . 105)) nil (26399 15774 838794 415000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-string-face fontified t)) . -100) (undo-tree-id35 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -101) (undo-tree-id36 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -102) (undo-tree-id37 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -103) (undo-tree-id38 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -104) (undo-tree-id39 . -1) 105) nil (26399 15774 838792 670000) 0 nil])
([nil nil ((100 . 111)) nil (26399 15774 838786 84000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face fontified t)) . -110) (undo-tree-id34 . -1) 111) nil (26399 15774 838784 906000) 0 nil])
([nil nil ((110 . 111)) nil (26399 15774 838782 688000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -110) (undo-tree-id33 . -1) 111) nil (26399 15774 838781 372000) 0 nil])
([nil nil ((110 . 111)) nil (26399 15774 838779 356000) 0 nil])
([nil nil ((112 . 117)) nil (26399 15774 838778 351000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -115) (undo-tree-id31 . -1) (#(" " 0 1 (fontified t)) . -116) (undo-tree-id32 . -1) 117) nil (26399 15774 838776 830000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -112) (undo-tree-id28 . -1) (#(" " 0 1 (fontified t)) . -113) (undo-tree-id29 . -1) (#(" " 0 1 (fontified t)) . -114) (undo-tree-id30 . -1) 115) nil (26399 15774 838771 193000) 0 nil])
([nil nil ((112 . 113)) nil (26399 15774 838753 121000) 0 nil])
([nil nil ((115 . 119) (#("    " 0 4 (fontified nil)) . 114) (undo-tree-id65 . -4) (113 . 119) (t 26399 15774 908784 755000)) nil (26399 15789 409378 738000) 0 nil])
([nil nil ((119 . 126)) nil (26399 15789 409376 630000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -125) (undo-tree-id64 . -1) 126) nil (26399 15789 409375 644000) 0 nil])
([nil nil ((#("while(" 0 5 (face font-lock-keyword-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . -119) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -6) 125) nil (26399 15789 409373 628000) 0 nil])
([nil nil ((119 . 121)) nil (26399 15789 409370 167000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 139 151 nil nil nil t nil)) #s(yas--exit 125 #s(yas--field 1 139 151 nil nil nil t nil)) 3 nil #s(yas--field 1 139 151 nil nil nil t nil) nil nil)) (126 . 130) (124 . 125) (#("    " 0 4 (fontified nil)) . 124) (undo-tree-id57 . -4) (119 . 149) (#("do" 0 2 (face font-lock-keyword-face fontified t)) . 119) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) 121) nil (26399 15789 409368 709000) 0 nil])
([nil nil ((140 . 141) (#("condition" 0 9 (fontified nil)) . 140) (undo-tree-id56 . -9) (139 . 140)) nil (26399 15789 409363 495000) 0 nil])
([nil nil ((139 . 146) (#("ch" 0 2 (fontified t)) . -139) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) 141) nil (26399 15789 409361 121000) 0 nil])
([nil nil ((146 . 148)) nil (26399 15789 409356 634000) 0 nil])
([nil nil ((#("`" 0 1 (fontified t)) . -146) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("`" 0 1 (fontified t)) . -147) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 148) nil (26399 15789 409354 666000) 0 nil])
([nil nil ((146 . 148)) nil (26399 15789 409341 595000) 0 nil])
([nil nil ((147 . 150)) nil (26399 15789 409337 185000) 0 nil])
([nil nil ((apply yas--snippet-revive 119 153 #s(yas--snippet nil (#s(yas--field 1 139 151 nil nil nil t nil)) #s(yas--exit 125 #s(yas--field 1 139 151 nil nil nil t nil)) 3 nil #s(yas--field 1 139 151 nil nil nil t nil) nil nil))) nil (26399 15811 302617 658000) 0 nil])
([nil nil ((125 . 126) (#("	" 0 1 (fontified nil)) . 124) (undo-tree-id92 . -1) (125 . 126) (t 26399 15789 465183 532000)) nil (26399 15811 302616 467000) 0 nil])
([nil nil ((126 . 131)) nil (26399 15811 302614 15000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -129) (undo-tree-id90 . -1) (#("G" 0 1 (fontified t)) . -130) (undo-tree-id91 . -1) 131) nil (26399 15811 302612 682000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t)) . -126) (undo-tree-id87 . -1) (#("R" 0 1 (fontified t)) . -127) (undo-tree-id88 . -1) (#("I" 0 1 (fontified t)) . -128) (undo-tree-id89 . -1) 129) nil (26399 15811 302609 17000) 0 nil])
([nil nil ((126 . 127)) nil (26399 15811 302604 473000) 0 nil])
([nil nil ((127 . 128)) nil (26399 15811 302603 732000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 134 136 nil nil nil t #s(yas--field 2 137 145 nil nil nil t nil)) #s(yas--field 2 137 145 nil nil nil t nil)) nil 4 nil #s(yas--field 2 137 145 nil nil nil t nil) nil nil)) (126 . 157) (#("pr" 0 2 (fontified t)) . 126) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) 128) nil (26399 15811 302602 152000) 0 nil])
([nil nil ((135 . 136) (#("format string" 0 13 (face font-lock-string-face fontified nil)) . 135) (undo-tree-id83 . -13) (134 . 135)) nil (26399 15811 302597 727000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -135) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 136) nil (26399 15811 302595 171000) 0 nil])
([nil nil ((135 . 137)) nil (26399 15811 302592 323000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-string-face fontified t)) . -135) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -136) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 137) nil (26399 15811 302590 731000) 0 nil])
([nil nil ((135 . 136)) nil (26399 15811 302585 373000) 0 nil])
([nil nil ((138 . 139) (#(" ,a0,a1" 0 7 (fontified nil)) . 138) (undo-tree-id76 . -7) (137 . 138)) nil (26399 15811 302584 344000) 0 nil])
([nil nil ((137 . 144) (#("ch" 0 2 (fontified t)) . -137) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) 139) nil (26399 15811 302581 519000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -143) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 144) nil (26399 15811 302573 903000) 0 nil])
([nil nil ((143 . 145)) nil (26399 15811 302570 282000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -143) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("_" 0 1 (fontified t)) . -144) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 145) nil (26399 15811 302567 168000) 0 nil])
([nil nil ((143 . 145)) nil (26399 15811 302548 583000) 0 nil])
([nil nil ((apply yas--snippet-revive 126 147 #s(yas--snippet nil (#s(yas--field 1 134 136 nil nil nil t #s(yas--field 2 137 145 nil nil nil t nil)) #s(yas--field 2 137 145 nil nil nil t nil)) nil 4 nil #s(yas--field 2 137 145 nil nil nil t nil) nil nil))) nil (26399 15814 703811 734000) 0 nil])
([nil nil ((137 . 138) (t 26399 15811 361462 424000)) nil (26399 15814 703807 76000) 0 nil])
([nil nil ((136 . 138) (t 26399 15814 761403 764000)) nil (26399 15820 412684 183000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -123) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 124 (t 26399 15820 487972 545000)) nil (26399 15822 548383 560000) 0 nil])
([nil nil ((169 . 171) (t 26399 15822 627936 249000)) nil (26399 15851 994076 199000) 0 nil])
([nil nil ((172 . 173)) nil (26399 15851 994075 449000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-string-face fontified t)) . -174) (undo-tree-id95 . -1) (#("O" 0 1 (face font-lock-string-face fontified t)) . -175) (undo-tree-id96 . -1) (#("F" 0 1 (face font-lock-string-face fontified t)) . -176) (undo-tree-id97 . -1) 177) nil (26399 15851 994073 798000) 0 nil])
([nil nil ((174 . 176)) nil (26399 15851 994062 129000) 0 nil])
([nil nil ((163 . 164) (t 26399 15852 37452 577000)) nil (26399 15873 808136 205000) 0 nil])
([nil nil ((#("#include <stdio.h>
int main()
{
    printf(\"hello, world\");
    int hello = 1;
    char * chrstr= \"char string\";

    do {
	printf(\"%c\\n\",chrstr++);
    } while (*chrstr != '\\0');
    return 0;
}
" 0 8 (face font-lock-preprocessor-face fontified t) 8 9 (fontified t) 9 18 (face font-lock-string-face fontified t) 18 19 (fontified t) 19 22 (face font-lock-type-face fontified t) 22 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 36 (fontified t) 36 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-2-face) fontified t) 43 57 (face font-lock-string-face fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 64 (fontified t) 64 67 (face font-lock-type-face fontified t) 67 79 (fontified t) 79 83 (fontified t) 83 87 (face font-lock-type-face fontified t) 87 98 (fontified t) 98 111 (face font-lock-string-face fontified t) 111 113 (fontified t) 113 114 (fontified t) 114 118 (fontified t) 118 120 (face font-lock-keyword-face fontified t) 120 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-2-face) fontified t) 122 123 (fontified t) 123 124 (fontified t) 124 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-3-face) fontified t) 131 137 (face font-lock-string-face fontified t) 137 138 (fontified t) 138 146 (fontified t) 146 147 (face (rainbow-delimiters-depth-3-face) fontified t) 147 148 (fontified t) 148 149 (fontified t) 149 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-2-face) fontified t) 154 155 (fontified t) 155 160 (face font-lock-keyword-face fontified t) 160 161 (fontified t) 161 162 (face (rainbow-delimiters-depth-2-face) fontified t) 162 163 (fontified t) 163 173 (fontified t) 173 177 (face font-lock-string-face fontified t) 177 178 (face (rainbow-delimiters-depth-2-face) fontified t) 178 179 (fontified t) 179 180 (fontified t) 180 184 (fontified t) 184 190 (face font-lock-keyword-face fontified t) 190 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-1-face) fontified t) 195 196 (fontified t)) . 1) (undo-tree-id119 . -137) (undo-tree-id120 . -163) (undo-tree-id121 . -196) (undo-tree-id122 . -163) (undo-tree-id123 . -163) (t 26399 15873 863777 280000)) nil (26399 15926 60995 739000) 0 nil])
([nil nil ((1 . 3)) nil (26399 15926 60992 385000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("t" 0 1 (fontified t)) . -2) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 3) nil (26399 15926 60991 592000) 0 nil])
([nil nil ((1 . 3)) nil (26399 15926 60966 659000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 19 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (1 . 19) (#("io" 0 2 (fontified t)) . 1) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) 3) nil (26399 15926 60966 3000) 0 nil])
([nil nil ((19 . 21)) nil (26399 15926 60963 767000) 0 nil])
([nil nil ((21 . 26)) nil (26399 15926 60963 427000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -24) (undo-tree-id108 . -1) (#("n" 0 1 (fontified t)) . -25) (undo-tree-id109 . -1) 26) nil (26399 15926 60962 863000) 0 nil])
([nil nil ((24 . 25)) nil (26399 15926 60961 223000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil))) #s(yas--exit 42 nil) 6 nil #s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil)) nil nil)) (21 . 77) (#("main" 0 4 (fontified t)) . 21) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) 25) nil (26399 15926 60960 690000) 0 nil])
([nil nil ((31 . 34) (#("int argc, char *argv[]" 0 3 (face font-lock-type-face fontified nil) 3 10 (fontified nil) 10 14 (face font-lock-type-face fontified nil) 14 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-2-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 31) (30 . 31)) nil (26399 15926 60958 373000) 0 nil])
([nil nil ((apply yas--snippet-revive 21 59 #s(yas--snippet nil (#s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil))) #s(yas--exit 42 nil) 6 nil #s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil)) nil nil))) nil (26399 15926 60957 753000) 0 nil])
([nil nil ((37 . 42)) nil (26399 15926 60957 264000) 0 nil])
([nil nil ((42 . 44)) nil (26399 15926 60956 772000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 50 62 nil nil nil t #s(yas--field 2 63 63 nil nil nil t nil)) #s(yas--field 2 63 63 nil nil nil t nil)) nil 7 nil #s(yas--field 2 63 63 nil nil nil t nil) nil nil)) (42 . 73) (#("pr" 0 2 (fontified t)) . 42) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) 44) nil (26399 15926 60955 949000) 0 nil])
([nil nil ((51 . 63) (#("format string" 0 13 (face font-lock-string-face fontified nil)) . 51) (undo-tree-id101 . -13) (50 . 51)) nil (26399 15926 60953 349000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -62) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 63) nil (26399 15926 60951 418000) 0 nil])
([nil nil ((#(" ,a0,a1" 0 7 (fontified t)) . 63) (undo-tree-id98 . -7)) nil (26399 15926 60947 46000) 0 nil])
([nil nil ((apply yas--snippet-revive 42 65 #s(yas--snippet nil (#s(yas--field 1 50 62 nil nil nil t #s(yas--field 2 63 63 nil nil nil t nil)) #s(yas--field 2 63 63 nil nil nil t nil)) nil 7 nil #s(yas--field 2 63 63 nil nil nil t nil) nil nil))) nil (26399 15927 170369 331000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -69) (undo-tree-id124 . -1) 70 (t 26399 15926 103010 227000)) nil (26399 15927 170366 223000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -66) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#(" " 0 1 (fontified t)) . -67) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -68) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 69 (t 26399 15927 212994 643000)) nil (26399 15928 103786 747000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -65) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 66 (t 26399 15928 136315 33000)) nil (26399 15928 597876 658000) 0 nil])
([nil nil ((#("#include <stdio.h>

int main(void)
{
    printf(\"hello, world\");
    return 0;
}
" 0 8 (face font-lock-preprocessor-face fontified t) 8 9 (fontified t) 9 18 (face font-lock-string-face fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 23 (face font-lock-type-face fontified t) 23 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t) 37 41 (fontified t) 41 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 62 (face font-lock-string-face fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 69 (fontified t) 69 75 (face font-lock-keyword-face fontified t) 75 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t) 80 81 (fontified t)) . 1) (undo-tree-id153 . -81) (undo-tree-id154 . -41) (undo-tree-id155 . -64) (undo-tree-id156 . -64) (t 26399 15928 629641 462000)) nil (26399 15981 737376 470000) 0 nil])
([nil nil ((1 . 3)) nil (26399 15981 737372 329000) 0 nil])
([nil nil ((#("st" 0 2 (fontified t)) . -1) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) 3) nil (26399 15981 737371 379000) 0 nil])
([nil nil ((1 . 3)) nil (26399 15981 737367 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 19 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (1 . 19) (#("io" 0 2 (fontified t)) . 1) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) 3) nil (26399 15981 737366 795000) 0 nil])
([nil nil ((19 . 21)) nil (26399 15981 737362 855000) 0 nil])
([nil nil ((21 . 25)) nil (26399 15981 737362 122000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil))) #s(yas--exit 42 nil) 9 nil #s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil)) nil nil)) (21 . 77) (#("main" 0 4 (fontified t)) . 21) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) 25) nil (26399 15981 737360 960000) 0 nil])
([nil nil ((31 . 34) (#("int argc, char *argv[]" 0 3 (face font-lock-type-face fontified nil) 3 10 (fontified nil) 10 14 (face font-lock-type-face fontified nil) 14 20 (fontified nil) 20 21 (face (rainbow-delimiters-depth-2-face) fontified nil) 21 22 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 31) (30 . 31)) nil (26399 15981 737356 46000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -33) (undo-tree-id143 . -1) 34) nil (26399 15981 737354 39000) 0 nil])
([nil nil ((33 . 34)) nil (26399 15981 737344 431000) 0 nil])
([nil nil ((apply yas--snippet-revive 21 59 #s(yas--snippet nil (#s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil))) #s(yas--exit 42 nil) 9 nil #s(yas--field 1 30 34 nil nil nil t #s(yas--exit 42 nil)) nil nil))) nil (26399 15981 737343 804000) 0 nil])
([nil nil ((37 . 42)) nil (26399 15981 737343 127000) 0 nil])
([nil nil ((42 . 46)) nil (26399 15981 737341 416000) 0 nil])
([nil nil ((46 . 62)) nil (26399 15981 737337 28000) 0 nil])
([nil nil ((62 . 67) (t 26399 15981 782260 200000)) nil (26399 15995 967101 457000) 0 nil])
([nil nil ((67 . 69)) nil (26399 15995 967100 798000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 87 99 nil nil nil t nil)) #s(yas--exit 73 #s(yas--field 1 87 99 nil nil nil t nil)) 10 nil #s(yas--field 1 87 99 nil nil nil t nil) nil nil)) (74 . 78) (72 . 73) (#("    " 0 4 (fontified nil)) . 72) (undo-tree-id158 . -4) (67 . 97) (#("do" 0 2 (face font-lock-keyword-face fontified t)) . 67) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) 69) nil (26399 15995 967099 693000) 0 nil])
([nil nil ((88 . 97) (#("condition" 0 9 (fontified nil)) . 88) (undo-tree-id157 . -9) (87 . 88)) nil (26399 15995 967095 259000) 0 nil])
([nil nil ((96 . 98)) nil (26399 15995 967085 676000) 0 nil])
([nil nil ((apply yas--snippet-revive 67 101 #s(yas--snippet nil (#s(yas--field 1 87 99 nil nil nil t nil)) #s(yas--exit 73 #s(yas--field 1 87 99 nil nil nil t nil)) 10 nil #s(yas--field 1 87 99 nil nil nil t nil) nil nil))) nil (26399 16017 120929 813000) 0 nil])
([nil nil ((73 . 78) (t 26399 15996 5411 451000)) nil (26399 16017 120929 373000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -73) (undo-tree-id169 . -1) (#("r" 0 1 (fontified t)) . -74) (undo-tree-id170 . -1) (#("i" 0 1 (fontified t)) . -75) (undo-tree-id171 . -1) (#("n" 0 1 (fontified t)) . -76) (undo-tree-id172 . -1) (#("t" 0 1 (fontified t)) . -77) (undo-tree-id173 . -1) 78) nil (26399 16017 120928 497000) 0 nil])
([nil nil ((73 . 76)) nil (26399 16017 120925 121000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -74) (undo-tree-id167 . -1) (#("r" 0 1 (fontified t)) . -75) (undo-tree-id168 . -1) 76) nil (26399 16017 120924 404000) 0 nil])
([nil nil ((74 . 75)) nil (26399 16017 120922 822000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 #<marker at 81 in test.c> #<marker at 85 in test.c> nil nil nil t #s(yas--field 2 #<marker at 86 in test.c> #<marker at 94 in test.c> nil nil nil t nil)) #s(yas--field 2 #<marker at 86 in test.c> #<marker at 94 in test.c> nil nil nil t nil)) nil 11 #<overlay from 73 to 96 in test.c> #s(yas--field 2 #<marker at 86 in test.c> #<marker at 94 in test.c> nil nil nil t nil) nil nil)) (73 . 104) (#("pr" 0 2 (fontified t)) . 73) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) 75) nil (26399 16017 120921 949000) 0 nil])
([nil nil ((82 . 85) (#("format string" 0 13 (face font-lock-string-face fontified nil)) . 82) (undo-tree-id163 . -13) (81 . 82)) nil (26399 16017 120918 493000) 0 nil])
([nil nil ((87 . 88) (#(" ,a0,a1" 0 7 (fontified nil)) . 87) (undo-tree-id162 . -7) (86 . 87)) nil (26399 16017 120915 809000) 0 nil])
([nil current ((88 . 94)) nil (26399 16017 120906 508000) 0 nil])
nil
